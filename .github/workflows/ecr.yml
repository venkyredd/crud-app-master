name: Build, Push, and Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Register new Task Definition
        id: register-task-def
        run: |
          echo '{
            "family": "${{ secrets.SERVICE_NAME }}-family",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.TASK_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.TASK_ROLE_ARN }}",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "containerDefinitions": [
              {
                "name": "${{ secrets.CONTAINER_NAME }}",
                "image": "'$ECR_REGISTRY'/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
                "portMappings": [
                  {
                    "containerPort": ${{ secrets.CONTAINER_PORT }},
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ]
          }' > taskdef.json

          aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --region ${{ secrets.AWS_REGION }}

      - name: Update ECS Service with new Load Balancer and Target Group
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          NEW_TG_ARN: ${{ secrets.NEW_TG_ARN }}
          NEW_ALB_NAME: ${{ secrets.NEW_ALB_NAME }}  # ALB Name here
        run: |
          echo "Updating ECS service with new ALB and TG..."
          if [ -n "$NEW_TG_ARN" ] && [ -n "$NEW_ALB_NAME" ]; then
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$SERVICE_NAME" \
              --force-new-deployment \
              --load-balancers "targetGroupArn=$NEW_TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT,loadBalancerName=$NEW_ALB_NAME" \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "Error: Target Group ARN and ALB Name are required."
            exit 1
          fi
