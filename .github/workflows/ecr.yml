name: Build, Push, and Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Register new Task Definition
        id: register-task-def
        run: |
          echo '{
            "family": "${{ secrets.SERVICE_NAME }}-family",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.TASK_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.TASK_ROLE_ARN }}",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "containerDefinitions": [
              {
                "name": "${{ secrets.CONTAINER_NAME }}",
                "image": "'$ECR_REGISTRY'/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
                "portMappings": [
                  {
                    "containerPort": ${{ secrets.CONTAINER_PORT }},
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${{ secrets.SERVICE_NAME }}",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }' > taskdef.json

          aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --region ${{ secrets.AWS_REGION }}

      - name: Check if ECS Service exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ secrets.CLUSTER_NAME }} \
            --services ${{ secrets.SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --query 'services[0].status' \
            --output text)

          echo "Service status: $SERVICE_STATUS"
          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Service already exists, skipping service creation."
            echo "service_exists=true" >> $GITHUB_ENV
          else
            echo "service_exists=false" >> $GITHUB_ENV
          fi

      - name: Create or Update ECS Service
        if: env.service_exists == 'false'
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          VPC_ID: ${{ secrets.VPC_ID }}
          SUBNET_IDS: ${{ secrets.SUBNET_IDS }}
          SECURITY_GROUPS: ${{ secrets.SECURITY_GROUPS }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          TG_ARN: arn:aws:elasticloadbalancing:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/v-tg1/1e0c9e7ad875dbe4 # Replace with your actual Target Group ARN
        run: |
          echo "Creating new ECS service with Task Definition and Target Group..."

          aws ecs create-service \
            --cluster "$CLUSTER_NAME" \
            --service-name "$SERVICE_NAME" \
            --task-definition "${SERVICE_NAME}-family" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=$TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT" \
            --region ${{ secrets.AWS_REGION }}

      - name: Update ECS Service (if service already exists)
        if: env.service_exists == 'true'
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          VPC_ID: ${{ secrets.VPC_ID }}
          SUBNET_IDS: ${{ secrets.SUBNET_IDS }}
          SECURITY_GROUPS: ${{ secrets.SECURITY_GROUPS }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          TG_ARN: arn:aws:elasticloadbalancing:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/v-tg1/1e0c9e7ad875dbe4 # Replace with your actual Target Group ARN
        run: |
          echo "Updating ECS service with new Task Definition..."

          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "${SERVICE_NAME}-family" \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=$TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT" \
            --region ${{ secrets.AWS_REGION }}

      - name: Verify ECS Service Status
        run: |
          # Checking ECS service status after deployment
          aws ecs describe-services \
            --cluster ${{ secrets.CLUSTER_NAME }} \
            --services ${{ secrets.SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --query 'services[0].status'
